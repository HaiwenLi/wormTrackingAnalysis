function visualizeSampleHeadAngTraj(headAngSampleTraj,headAngRanges,featureToSample,numSampleTraj,wormcats,strain,wormnum,marker,phase, dataset, saveResults)

% function takes saved sample traj data in microns (generated by plotHeadAngSpeed.m), category of worms to analysis,
% strain name, plus desired number of sample trajectories, and plots/saves figures of worm trajectories

%% INPUTS
% headAngSpeedRanges: struct containing fields matching entries in wormcat. Each field contains 500x2x5 cell array for 500 trajectories, xy
% coordinates, and 5 sampling ranges.
% featureToSample: string specifying what is being sampled. 'headAngTotal','headAngNorm','headAngSpeed'.
% numSampleTraj: [1x1] double specifying the number of trajectories to be plotted for each sample onto the same graph
% wormcats: cell array containing categories of worms to be analysed. Usually {'leaveCluster','loneWorm').
% strain: string specifying the strain to be analysed.
% wormnum: string specifying worm density. '40'.
% marker: string specifying fluorescent marker for imaging. 'pharynx' or 'bodywall'.
% phase: string. 'fullMovie','joining','sweeping'.
% dataset: 1 or 2.
% saveResults: true or false logical.
% headAngSampleTraj: xy coordinates of sample trajectories. If not supplied then function takes previously saved values.

%% OUTPUT
% trajectory plots

%% function
%% get sample unit
if strcmp(featureToSample,'headAngTotal')
    sampleTrajUnit = 'radian';
elseif strcmp(featureToSample,'headAngNorm')
    sampleTrajUnit = 'radian/micron';
elseif strcmp(featureToSample,'headAngSpeed')
    sampleTrajUnit = 'radian/s';
else
    warning('Wrong feature selected for trajectory visualisation')
end
        
%% loop through ranges

for rangeCtr = 1:size(headAngRanges,1)
    for wormcatCtr = 1:length(wormcats)
        samplePathFig = figure; hold on
        % remove empty cells
        headAngSampleTrajRange = squeeze(headAngSampleTraj.(wormcats{wormcatCtr})(:,:,rangeCtr));
        headAngSampleTrajRange = headAngSampleTrajRange(~cellfun('isempty',headAngSampleTrajRange));
        headAngSampleTrajRange = reshape(headAngSampleTrajRange,[],2);
        
        %% randomly select sample trajectories from the saved ones
        numSavedTraj = size(headAngSampleTrajRange,1);
        if numSampleTraj<=numSavedTraj
            trajSamples = randi(size(headAngSampleTrajRange,1),[numSampleTraj,1]);
        else
            trajSamples = 1:numSavedTraj;
        end
        
        %% loop through each saved trajectory to get xy coordinates
        for trajCtr = 1:length(trajSamples)
            % get xy coordinates for sample traj
            traj_xcoords = headAngSampleTraj.(wormcats{wormcatCtr}){trajSamples(trajCtr),1,rangeCtr};
            traj_ycoords = headAngSampleTraj.(wormcats{wormcatCtr}){trajSamples(trajCtr),2,rangeCtr};
            
            %% manipulate xy coordinates for plotting
            % set all trajectories to start at 0,0
            traj_xcoords = traj_xcoords - traj_xcoords(1);
            traj_ycoords = traj_ycoords - traj_ycoords(1);
            
            %% plot
            set(0,'CurrentFigure',samplePathFig)
            plot(traj_xcoords,traj_ycoords)
        end
        
        %% format and save plot
        title([strain '\_' wormcats{wormcatCtr} ' sampleTraj, '...
            num2str(headAngRanges(rangeCtr,1)) '-' num2str(headAngRanges(rangeCtr,2)) sampleTrajUnit],'FontWeight','normal')
        set(samplePathFig,'PaperUnits','centimeters')
        xlim([-1e3 1e3])
        ylim([-1e3 1e3])
        xlabel('microns');
        ylabel('microns');
        axis equal
        ax = gca;
        ax.XAxisLocation = 'origin';
        ax.YAxisLocation = 'origin';
        figurename = ['figures/turns/sampleTraj/' featureToSample '_' strain '_' wormnum '_' wormcats{wormcatCtr} '_range' num2str(rangeCtr) '_' phase '_data' num2str(dataset) '_' marker ];
        if saveResults
            load('exportOptions.mat')
            exportfig(samplePathFig,[figurename '.eps'],exportOptions)
            system(['epstopdf ' figurename '.eps']);
            system(['rm ' figurename '.eps']);
        end
    end
end